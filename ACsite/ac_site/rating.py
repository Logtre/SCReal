# -*- coding:utf-8 -*-

import analitic
import math
#import numpy as np


def individual_rating(ls1, avg1, ls2, avg2, ls3, avg3):
    '''個別レーティングを計算する'''

    # 重み付けパラメータ
    weight_param1 = 0.5
    weight_param2 = 0.3
    weight_param3 = 0.2

    # 要素レーティング計算
    scr1 = elemental_rating(ls1, avg1)
    scr2 = elemental_rating(ls2, avg2)
    scr3 = elemental_rating(ls3, avg3)

    # 個別レーティング計算
    rating_score = (weight_param1 * scr1) + (weight_param2 * scr2) + (weight_param3 * scr3)

    '''DEBUG用
    print(">>>>DEBUG>>>> scr1 is :")
    print(scr1)
    print(">>>>DEBUG>>>> scr2 is :")
    print(scr2)
    print(">>>>DEBUG>>>> scr3 is :")
    print(scr3)
    print(">>>>DEBUG>>>> rating_score is :")
    print(rating_score)
    '''

    return rating_score


def elemental_rating(trg, avg):
    '''要素レーティングを計算する'''

    elmt_rating = 0

    # 成長期
    if avg > 0:
        # lsがave未満
        if trg < avg:
            elmt_rating = 1 + trg / avg
        # lsがave近傍
        elif avg <= trg < avg * 2:
            elmt_rating = 2 + (trg - avg) / (avg * 2) # 1単位が2avg
        # lsがave2倍近傍
        elif avg * 2 <= trg < avg * 3:
            elmt_rating = 3 + (trg - avg) / (avg * 3) # 1単位が1avg
        # lsがave3倍近傍
        elif avg * 3 <= trg < avg * 5:
            elmt_rating = 4 + (trg - avg) / (avg * 5) # 1単位が2avg
        # lsがave5倍近傍
        else:
            elmt_rating = 5
    # 衰退期
    elif avg < 0:
        # lsがプラス
        if trg > 0:
            elmt_rating = 5
        # lsがave未満の衰退
        elif avg < trg <= 0:
            elmt_rating = 4 - (abs(trg) - abs(avg)) / (abs(avg) * 1) # 1単位が1avg
        # lsがave2倍未満の衰退
        elif avg * 2 < trg <= avg:
            elmt_rating = 3 - (abs(trg) - abs(avg)) / (abs(avg) * 2) # 1単位が1avg
        # lsがave3倍未満の衰退
        elif avg * 3 < trg <= avg * 2:
            elmt_rating = 2 - (abs(trg) - abs(avg)) / (abs(avg) * 3) # 1単位が1avg
        # lsがave3倍以上の衰退
        else:
            elmt_rating = 1

    return elmt_rating


def cal_stdev(ls1, ls2):
    '''
        月次データから年次のヒストリカルボラティリティを計算する
        ※通常はnumpyを活用すればHVは計算できるが、
         google app engineではnumpyを利用できないため、
         標準ライブラリを活用して計算している。
    '''

    # 結果格納用リストの初期化
    trg_diff_list = [0] * 12
    sum_diff = 0
    avg_diff = 0
    trg_var = 1

    for p in range(0,12):
        trg_diff_list[p] = float(ls1[p].guest_count) / float(ls2[p].guest_count)
        sum_diff += trg_diff_list[p]

    # 平均値の計算
    avg_diff = sum_diff / 12

    for q in range(0,12):
        # 分散の計算
        trg_var = trg_var * (trg_diff_list[p] - avg_diff)

    # 標準偏差の計算
    trg_stdev = math.sqrt(trg_var)

    return trg_stdev


def cal_beta(ls1, ls2, ls3):
    '''月次データから顧客数増加割合（ベータ）を計算する'''

    # 変数初期化
    alpha_list1 = [0] * 12
    alpha_list2 = [0] * 12
    beta_sum = 0

    for p in range(0,12):
        # アルファの計算１
        alpha_list1[p] = float(ls1[p].guest_count) / float(ls2[p].guest_count)
        # アルファの計算２
        alpha_list2[p] = float(ls2[p].guest_count) / float(ls3[p].guest_count)
        # ベータの計算
        beta_sum += alpha_list1[p] / alpha_list2[p]

    # ベータの計算
    beta = beta_sum / 12

    return beta


def city_list():

    # 市区町村リスト
    city_list = [
        "1100","1101","1102","1103","1104","1105","1106","1107","1110","1202","1203","1204","1207","1217","1224","1229","1231","1394","1395","1397","1398","1400","1461","1463",
        "2201","2202","2206",
        "3214",
        "4100","4101","4102","4103","4207","4404","4423",
        "5201",
        "7203","7204",
        "8201","8205","8220","8224",
        "9201","9206","9213","9407",
        "10201","10202","10421","10426","10449",
        "11100","11101","11102","11103","11106","11107","11108","11109","11201","11203","11207","11208","11215","11219","11221","11222","11223","11224","11225","11227","11229",
        "11230","11235",
        "12100","12101","12102","12103","12104","12106","12203","12204","12205","12207","12211","12212","12213","12216","12217","12218","12220","12224","12226","12227","12228",
        "12231","12233","12234","12235","12237","12238","12421","12443",
        "13000","13101","13102","13103","13104","13105","13106","13107","13108","13109","13110","13111","13112","13113","13114","13115","13116","13117","13118","13119","13120",
        "13121","13122","13123","13201","13202","13203","13204","13205","13206","13208","13209","13210","13211","13212","13213","13214","13218","13219","13222","13224","13225",
        "13228","13229","13421",
        "14100","14101","14102","14103","14104","14105","14106","14107","14108","14109","14110","14112","14113","14116","14117","14118","14130","14131","14132","14133","14134",
        "14135","14136","14137","14150","14151","14152","14153","14201","14203","14204","14205","14206","14207","14208","14211","14212","14213","14301","14382","14384",
        "15100","15103","15210","15217","15226","15461",
        "16201","16202","16210",
        "17201","17202","17210",
        "18201",
        "19201","19202","19209","19211","19213","19425","19429","19430",
        "20201","20202","20203","20207","20208","20212","20213","20214","20321","20362","20485","20486","20561","20563","20583",
        "21201","21203","21210","21217","21219","21220","21604",
        "22100","22101","22102","22103","22130","22131","22136","22203","22205","22206","22207","22208","22210","22219","22222","22225","22301","22304",
        "23100","23101","23102","23103","23104","23105","23106","23107","23108","23110","23111","23115","23116","23201","23202","23203","23204","23211","23216","23231","23447",
        "24201","24203","24215",
        "25201","25212",
        "26100","26101","26102","26103","26104","26105","26106","26107","26108","26109","26110","26111","26204","26205","26206","26207","26208","26209","26213","26343",
        "27100","27102","27103","27104","27106","27107","27108","27109","27111","27113","27114","27115","27116","27117","27118","27119","27120","27121","27122","27123","27124",
        "27125","27126","27127","27128","27140","27141","27144","27146","27202","27203","27204","27205","27207","27208","27209","27210","27211","27212","27213","27214","27215",
        "27216","27218","27219","27220","27222","27223","27225","27227","27228","27229","27230","27231","27232","27366","27383",
        "28100","28101","28102","28105","28106","28107","28108","28109","28110","28111","28201","28202","28203","28204","28205","28206","28207","28214","28223","28226","28446",
        "28464","28586",
        "29201","29202","29209","29343","29402","29453",
        "30201","30203","30206","30401","30421",
        "31202","31390",
        "32201","32203","32528",
        "33100","33101","33202","33204","33211","33214",
        "34100","34101","34102","34103","34104","34108","34205","34207","34213",
        "35202","35203",
        "36201","36202","36207","36208",
        "37201","37204","37208","37364",
        "38201","38202","38203",
        "39201","39209",
        "40100","40106","40130","40131","40132","40133","40134","40135","40136","40137","40203","40205","40217","40218","40223","40230","40349","40522","40647",
        "41201","41202","41401",
        "42201","42202","42211",
        "43100","43101","43103","43215","43433",
        "44201","44202","44213",
        "45201","45206",
        "46201","46210","46222","46505",
        "47201","47205","47207","47208","47209","47210","47211","47212","47213","47214","47215","47306","47308","47311","47314","47324","47325","47326","47327","47329","47348","47354","47381"
    ]

    return city_list
